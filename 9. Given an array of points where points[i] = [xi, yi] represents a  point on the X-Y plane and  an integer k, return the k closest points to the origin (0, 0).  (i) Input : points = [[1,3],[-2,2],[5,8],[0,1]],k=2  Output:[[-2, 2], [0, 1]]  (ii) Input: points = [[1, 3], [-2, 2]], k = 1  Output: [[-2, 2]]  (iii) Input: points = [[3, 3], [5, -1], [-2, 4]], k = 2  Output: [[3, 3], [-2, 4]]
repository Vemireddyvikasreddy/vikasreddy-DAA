import heapq

def k_closest(points, k):
    # Compute the squared distance for each point and store it in a list of tuples
    # where the first element is the squared distance and the second element is the point itself
    distances = [(x*x + y*y, [x, y]) for x, y in points]
    
    # Sort the points based on the squared distance (heapify could also be used for optimization)
    distances.sort(key=lambda x: x[0])
    
    # Extract the k closest points
    return [point for _, point in distances[:k]]

# Test Cases:
points1 = [[1, 3], [-2, 2], [5, 8], [0, 1]]
k1 = 2
print(k_closest(points1, k1))  # Output: [[-2, 2], [0, 1]]

points2 = [[1, 3], [-2, 2]]
k2 = 1
print(k_closest(points2, k2))  # Output: [[-2, 2]]

points3 = [[3, 3], [5, -1], [-2, 4]]
k3 = 2
print(k_closest(points3, k3))  # Output: [[3, 3], [-2, 4]]
