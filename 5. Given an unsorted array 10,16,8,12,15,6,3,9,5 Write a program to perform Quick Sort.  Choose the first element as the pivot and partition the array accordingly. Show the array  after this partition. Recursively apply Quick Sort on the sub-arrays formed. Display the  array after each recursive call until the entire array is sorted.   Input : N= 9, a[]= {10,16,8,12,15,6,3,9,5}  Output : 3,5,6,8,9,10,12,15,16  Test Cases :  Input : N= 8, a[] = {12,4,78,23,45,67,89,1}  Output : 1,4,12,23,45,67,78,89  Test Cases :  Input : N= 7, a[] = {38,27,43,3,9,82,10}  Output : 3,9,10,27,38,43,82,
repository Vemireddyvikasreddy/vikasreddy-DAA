def partition(arr, low, high):
    pivot = arr[low]  # Choose the first element as the pivot
    i = low + 1
    for j in range(low + 1, high + 1):
        if arr[j] < pivot:
            arr[i], arr[j] = arr[j], arr[i]  # Swap if element is smaller than pivot
            i += 1
    arr[low], arr[i - 1] = arr[i - 1], arr[low]  # Place pivot in the correct position
    return i - 1

def quick_sort(arr, low, high):
    if low < high:
        pivot_index = partition(arr, low, high)  # Get the partition index
        print("Array after partitioning:", arr)  # Show the array after partitioning
        quick_sort(arr, low, pivot_index - 1)  # Sort the left sub-array
        quick_sort(arr, pivot_index + 1, high)  # Sort the right sub-array

# Test Case 1
arr1 = [10, 16, 8, 12, 15, 6, 3, 9, 5]
print("Initial Array:", arr1)
quick_sort(arr1, 0, len(arr1) - 1)
print("Sorted Array:", arr1)

# Test Case 2
arr2 = [12, 4, 78, 23, 45, 67, 89, 1]
print("\nInitial Array:", arr2)
quick_sort(arr2, 0, len(arr2) - 1)
print("Sorted Array:", arr2)

# Test Case 3
arr3 = [38, 27, 43, 3, 9, 82, 10]
print("\nInitial Array:", arr3)
quick_sort(arr3, 0, len(arr3) - 1)
print("Sorted Array:", arr3)
