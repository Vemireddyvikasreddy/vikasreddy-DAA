def partition(arr, low, high):
    # Choosing the middle element as the pivot
    pivot = arr[(low + high) // 2]  
    i = low - 1  # Pointer for the smaller element
    
    # Rearranging elements so that smaller elements are on the left of pivot
    # and larger elements are on the right
    for j in range(low, high + 1):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    
    # Swap the pivot element with the element at index i+1
    arr[i + 1], arr[(low + high) // 2] = arr[(low + high) // 2], arr[i + 1]
    return i + 1

def quick_sort(arr, low, high):
    if low < high:
        # Partitioning the array
        pivot_index = partition(arr, low, high)
        
        # Show the array after partitioning
        print(f"Array after partitioning: {arr}")
        
        # Recursively sort the left and right sub-arrays
        quick_sort(arr, low, pivot_index - 1)
        quick_sort(arr, pivot_index + 1, high)

# Test Case 1
arr1 = [19, 72, 35, 46, 58, 91, 22, 31]
print("Initial Array:", arr1)
quick_sort(arr1, 0, len(arr1) - 1)
print("Sorted Array:", arr1)

# Test Case 2
arr2 = [31, 23, 35, 27, 11, 21, 15, 28]
print("\nInitial Array:", arr2)
quick_sort(arr2, 0, len(arr2) - 1)
print("Sorted Array:", arr2)

# Test Case 3
arr3 = [22, 34, 25, 36, 43, 67, 52, 13, 65, 17]
print("\nInitial Array:", arr3)
quick_sort(arr3, 0, len(arr3) - 1)
print("Sorted Array:", arr3)
